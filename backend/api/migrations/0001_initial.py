# Generated by Django 5.2.1 on 2025-06-11 04:13

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import multiselectfield.db.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Exercise',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название упражнения')),
                ('description', models.TextField(verbose_name='Описание')),
                ('difficulty', models.CharField(choices=[('easy', 'Легко'), ('medium', 'Средне'), ('hard', 'Сложно')], max_length=20, verbose_name='Сложность')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='exercises/photos/', verbose_name='Фото упражнения')),
                ('video_url', models.URLField(blank=True, null=True, verbose_name='Ссылка на видео')),
            ],
            options={
                'verbose_name': 'Упражнение',
                'verbose_name_plural': 'Упражнения',
            },
        ),
        migrations.CreateModel(
            name='Quote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(verbose_name='Цитата')),
                ('author', models.CharField(max_length=100, verbose_name='Автор')),
                ('image', models.ImageField(blank=True, null=True, upload_to='quotes/', verbose_name='Фото')),
            ],
            options={
                'verbose_name': 'Цитата',
                'verbose_name_plural': 'Цитаты',
            },
        ),
        migrations.CreateModel(
            name='SuperSet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('telegram_id', models.BigIntegerField(blank=True, default=1, null=True, unique=True)),
                ('photo_url', models.URLField(blank=True, null=True, verbose_name='Ссылка на фото')),
                ('training_choice', models.CharField(choices=[('gain', 'Набор массы'), ('loss', 'Похудение')], default='loss', max_length=20, verbose_name='Набор массы/похудение')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='BodyMeasurement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weight', models.FloatField(verbose_name='Общий вес, кг')),
                ('chest', models.FloatField(verbose_name='Грудная клетка, см')),
                ('waist', models.FloatField(verbose_name='Талия, см')),
                ('hips', models.FloatField(verbose_name='Таз, см')),
                ('bicep_right', models.FloatField(verbose_name='Бицепс правой руки, см')),
                ('bicep_left', models.FloatField(verbose_name='Бицепс левой руки, см')),
                ('thigh_right', models.FloatField(verbose_name='Бедро правой ноги, см')),
                ('thigh_left', models.FloatField(verbose_name='Бедро левой ноги, см')),
                ('buttock_left', models.FloatField(verbose_name='Ягодица левая, см')),
                ('buttock_right', models.FloatField(verbose_name='Ягодица правая, см')),
                ('created_at', models.DateField(verbose_name='Дата замера')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='short_measurements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Замер тела',
                'verbose_name_plural': 'Замеры тела',
            },
        ),
        migrations.CreateModel(
            name='ExerciseInSet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('repetitions', models.PositiveIntegerField(verbose_name='Повторения')),
                ('weight', models.FloatField(blank=True, null=True, verbose_name='Вес (кг)')),
                ('exercise', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.exercise')),
            ],
            options={
                'verbose_name': 'Упражнение в сете',
                'verbose_name_plural': 'Упражнения в сете',
            },
        ),
        migrations.CreateModel(
            name='ExerciseSet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название сета')),
                ('exercises', models.ManyToManyField(related_name='exercise_sets', through='api.ExerciseInSet', to='api.exercise')),
            ],
            options={
                'verbose_name': 'Сет упражнений',
                'verbose_name_plural': 'Сеты упражнений',
            },
        ),
        migrations.AddField(
            model_name='exerciseinset',
            name='exercise_set',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.exerciseset'),
        ),
        migrations.CreateModel(
            name='ProgressPhoto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='Дата')),
                ('photo', models.ImageField(upload_to='progrss_photos/', verbose_name='Фотография')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Фото прогресса',
                'verbose_name_plural': 'Фотографии прогресса',
            },
        ),
        migrations.CreateModel(
            name='SuperSetExercise',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(default=0)),
                ('exercise', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.exercise')),
                ('superset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exercises', to='api.superset')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Vitamin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название витамина')),
                ('intake_time', multiselectfield.db.fields.MultiSelectField(choices=[('morning', 'Утро'), ('afternoon', 'День'), ('evening', 'Вечер'), ('workout', 'Перед тренировкой')], max_length=33, verbose_name='Время приёма')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Витамин',
                'verbose_name_plural': 'Витамины',
            },
        ),
        migrations.CreateModel(
            name='WishBodyResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weight', models.FloatField(verbose_name='Желаемый вес, кг')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wish_body', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Желаемый результат',
                'verbose_name_plural': 'Желаемые результаты',
            },
        ),
        migrations.CreateModel(
            name='Workout',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('workout_type', models.CharField(choices=[('cardio', 'Кардио'), ('strength', 'Силовая'), ('mixed', 'Смешанная')], default='mixed', max_length=20, verbose_name='Тип тренировки')),
                ('day', models.DateField(verbose_name='День тренировки')),
                ('start_time', models.TimeField(verbose_name='Время начала')),
                ('end_time', models.TimeField(verbose_name='Время конца')),
                ('location', models.CharField(blank=True, max_length=200, null=True, verbose_name='Место')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Тренировка',
                'verbose_name_plural': 'Тренировки',
            },
        ),
        migrations.CreateModel(
            name='WorkoutExercise',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(db_index=True, default=0, verbose_name='Порядок упражнения')),
                ('is_completed', models.BooleanField(default=False)),
                ('repetitions', models.PositiveIntegerField(blank=True, null=True)),
                ('weight', models.FloatField(blank=True, null=True)),
                ('exercise', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.exercise')),
                ('workout', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.workout')),
            ],
            options={
                'verbose_name': 'Упражнение в тренировке',
                'verbose_name_plural': 'Упражнения в тренировке',
                'ordering': ['order'],
                'unique_together': {('workout', 'exercise')},
            },
        ),
        migrations.AddField(
            model_name='workout',
            name='exercises',
            field=models.ManyToManyField(blank=True, related_name='workouts', through='api.WorkoutExercise', to='api.exercise'),
        ),
        migrations.CreateModel(
            name='WorkoutSuperSet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(default=0)),
                ('superset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.superset')),
                ('workout', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.workout')),
            ],
            options={
                'ordering': ['order'],
                'unique_together': {('workout', 'superset')},
            },
        ),
        migrations.AddField(
            model_name='workout',
            name='supersets',
            field=models.ManyToManyField(blank=True, related_name='workouts', through='api.WorkoutSuperSet', to='api.superset'),
        ),
        migrations.CreateModel(
            name='WorkoutSuperSetExercise',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('repetitions', models.PositiveIntegerField(blank=True, null=True)),
                ('weight', models.FloatField(blank=True, null=True)),
                ('superset_exercise', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.supersetexercise')),
                ('workout_superset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='superset_exercises', to='api.workoutsuperset')),
            ],
            options={
                'verbose_name': 'Упражнение в суперсете тренировки',
                'verbose_name_plural': 'Упражнения в суперсете тренировки',
            },
        ),
        migrations.AlterUniqueTogether(
            name='exerciseinset',
            unique_together={('exercise_set', 'exercise')},
        ),
    ]
